// Generated by gencpp from file limo_motion_controller/MotionPlan.msg
// DO NOT EDIT!


#ifndef LIMO_MOTION_CONTROLLER_MESSAGE_MOTIONPLAN_H
#define LIMO_MOTION_CONTROLLER_MESSAGE_MOTIONPLAN_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <limo_motion_controller/MovementController.h>

namespace limo_motion_controller
{
template <class ContainerAllocator>
struct MotionPlan_
{
  typedef MotionPlan_<ContainerAllocator> Type;

  MotionPlan_()
    : sequence()  {
    }
  MotionPlan_(const ContainerAllocator& _alloc)
    : sequence(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::limo_motion_controller::MovementController_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::limo_motion_controller::MovementController_<ContainerAllocator> >> _sequence_type;
  _sequence_type sequence;





  typedef boost::shared_ptr< ::limo_motion_controller::MotionPlan_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::limo_motion_controller::MotionPlan_<ContainerAllocator> const> ConstPtr;

}; // struct MotionPlan_

typedef ::limo_motion_controller::MotionPlan_<std::allocator<void> > MotionPlan;

typedef boost::shared_ptr< ::limo_motion_controller::MotionPlan > MotionPlanPtr;
typedef boost::shared_ptr< ::limo_motion_controller::MotionPlan const> MotionPlanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::limo_motion_controller::MotionPlan_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::limo_motion_controller::MotionPlan_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::limo_motion_controller::MotionPlan_<ContainerAllocator1> & lhs, const ::limo_motion_controller::MotionPlan_<ContainerAllocator2> & rhs)
{
  return lhs.sequence == rhs.sequence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::limo_motion_controller::MotionPlan_<ContainerAllocator1> & lhs, const ::limo_motion_controller::MotionPlan_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace limo_motion_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::limo_motion_controller::MotionPlan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::limo_motion_controller::MotionPlan_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::limo_motion_controller::MotionPlan_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::limo_motion_controller::MotionPlan_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::limo_motion_controller::MotionPlan_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::limo_motion_controller::MotionPlan_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::limo_motion_controller::MotionPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "862f364494b8552b6422445d2907f57e";
  }

  static const char* value(const ::limo_motion_controller::MotionPlan_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x862f364494b8552bULL;
  static const uint64_t static_value2 = 0x6422445d2907f57eULL;
};

template<class ContainerAllocator>
struct DataType< ::limo_motion_controller::MotionPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "limo_motion_controller/MotionPlan";
  }

  static const char* value(const ::limo_motion_controller::MotionPlan_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::limo_motion_controller::MotionPlan_<ContainerAllocator> >
{
  static const char* value()
  {
    return "limo_motion_controller/MovementController[] sequence\n"
"================================================================================\n"
"MSG: limo_motion_controller/MovementController\n"
"float32 speed\n"
"float32 angle\n"
"float32 duration\n"
;
  }

  static const char* value(const ::limo_motion_controller::MotionPlan_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::limo_motion_controller::MotionPlan_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sequence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotionPlan_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::limo_motion_controller::MotionPlan_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::limo_motion_controller::MotionPlan_<ContainerAllocator>& v)
  {
    s << indent << "sequence[]" << std::endl;
    for (size_t i = 0; i < v.sequence.size(); ++i)
    {
      s << indent << "  sequence[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::limo_motion_controller::MovementController_<ContainerAllocator> >::stream(s, indent + "    ", v.sequence[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIMO_MOTION_CONTROLLER_MESSAGE_MOTIONPLAN_H
