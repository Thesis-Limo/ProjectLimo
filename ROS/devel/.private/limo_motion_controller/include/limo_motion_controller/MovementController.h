// Generated by gencpp from file limo_motion_controller/MovementController.msg
// DO NOT EDIT!


#ifndef LIMO_MOTION_CONTROLLER_MESSAGE_MOVEMENTCONTROLLER_H
#define LIMO_MOTION_CONTROLLER_MESSAGE_MOVEMENTCONTROLLER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace limo_motion_controller
{
template <class ContainerAllocator>
struct MovementController_
{
  typedef MovementController_<ContainerAllocator> Type;

  MovementController_()
    : speed(0.0)
    , angle(0.0)
    , duration(0.0)  {
    }
  MovementController_(const ContainerAllocator& _alloc)
    : speed(0.0)
    , angle(0.0)
    , duration(0.0)  {
  (void)_alloc;
    }



   typedef float _speed_type;
  _speed_type speed;

   typedef float _angle_type;
  _angle_type angle;

   typedef float _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::limo_motion_controller::MovementController_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::limo_motion_controller::MovementController_<ContainerAllocator> const> ConstPtr;

}; // struct MovementController_

typedef ::limo_motion_controller::MovementController_<std::allocator<void> > MovementController;

typedef boost::shared_ptr< ::limo_motion_controller::MovementController > MovementControllerPtr;
typedef boost::shared_ptr< ::limo_motion_controller::MovementController const> MovementControllerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::limo_motion_controller::MovementController_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::limo_motion_controller::MovementController_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::limo_motion_controller::MovementController_<ContainerAllocator1> & lhs, const ::limo_motion_controller::MovementController_<ContainerAllocator2> & rhs)
{
  return lhs.speed == rhs.speed &&
    lhs.angle == rhs.angle &&
    lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::limo_motion_controller::MovementController_<ContainerAllocator1> & lhs, const ::limo_motion_controller::MovementController_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace limo_motion_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::limo_motion_controller::MovementController_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::limo_motion_controller::MovementController_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::limo_motion_controller::MovementController_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::limo_motion_controller::MovementController_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::limo_motion_controller::MovementController_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::limo_motion_controller::MovementController_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::limo_motion_controller::MovementController_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abc78f3d8ed307de203cb3588b86e07a";
  }

  static const char* value(const ::limo_motion_controller::MovementController_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xabc78f3d8ed307deULL;
  static const uint64_t static_value2 = 0x203cb3588b86e07aULL;
};

template<class ContainerAllocator>
struct DataType< ::limo_motion_controller::MovementController_<ContainerAllocator> >
{
  static const char* value()
  {
    return "limo_motion_controller/MovementController";
  }

  static const char* value(const ::limo_motion_controller::MovementController_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::limo_motion_controller::MovementController_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 speed\n"
"float32 angle\n"
"float32 duration\n"
;
  }

  static const char* value(const ::limo_motion_controller::MovementController_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::limo_motion_controller::MovementController_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
      stream.next(m.angle);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MovementController_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::limo_motion_controller::MovementController_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::limo_motion_controller::MovementController_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "duration: ";
    Printer<float>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIMO_MOTION_CONTROLLER_MESSAGE_MOVEMENTCONTROLLER_H
