# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from limo_motion_controller/OverrideMotionRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class OverrideMotionRequest(genpy.Message):
  _md5sum = "bbdf834105919beb2a921bd852a73b0a"
  _type = "limo_motion_controller/OverrideMotionRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 speed
float32 angle
float32 duration
bool sameSpeedStart
"""
  __slots__ = ['speed','angle','duration','sameSpeedStart']
  _slot_types = ['float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       speed,angle,duration,sameSpeedStart

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OverrideMotionRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.speed is None:
        self.speed = 0.
      if self.angle is None:
        self.angle = 0.
      if self.duration is None:
        self.duration = 0.
      if self.sameSpeedStart is None:
        self.sameSpeedStart = False
    else:
      self.speed = 0.
      self.angle = 0.
      self.duration = 0.
      self.sameSpeedStart = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3fB().pack(_x.speed, _x.angle, _x.duration, _x.sameSpeedStart))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.speed, _x.angle, _x.duration, _x.sameSpeedStart,) = _get_struct_3fB().unpack(str[start:end])
      self.sameSpeedStart = bool(self.sameSpeedStart)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3fB().pack(_x.speed, _x.angle, _x.duration, _x.sameSpeedStart))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.speed, _x.angle, _x.duration, _x.sameSpeedStart,) = _get_struct_3fB().unpack(str[start:end])
      self.sameSpeedStart = bool(self.sameSpeedStart)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3fB = None
def _get_struct_3fB():
    global _struct_3fB
    if _struct_3fB is None:
        _struct_3fB = struct.Struct("<3fB")
    return _struct_3fB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from limo_motion_controller/OverrideMotionResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class OverrideMotionResponse(genpy.Message):
  _md5sum = "874749314d3cdd5b8d70590d992e9aad"
  _type = "limo_motion_controller/OverrideMotionResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool alreadyRunning
"""
  __slots__ = ['alreadyRunning']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       alreadyRunning

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OverrideMotionResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.alreadyRunning is None:
        self.alreadyRunning = False
    else:
      self.alreadyRunning = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.alreadyRunning
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.alreadyRunning,) = _get_struct_B().unpack(str[start:end])
      self.alreadyRunning = bool(self.alreadyRunning)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.alreadyRunning
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.alreadyRunning,) = _get_struct_B().unpack(str[start:end])
      self.alreadyRunning = bool(self.alreadyRunning)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class OverrideMotion(object):
  _type          = 'limo_motion_controller/OverrideMotion'
  _md5sum = '4955e86101808a9dfce48b4756da7f72'
  _request_class  = OverrideMotionRequest
  _response_class = OverrideMotionResponse
